

 ### get openalex concepts ###
'Indexed in': ", ".join([c.get('display_name', '') for c in item.get('concepts', [])]),
###

#### IDK ####

def get_open_access(entry, origin, filename=''):
    if origin == 'PubMed':
        pmcid = entry.get('PMCID') or entry.get('PMC')
        if isinstance(pmcid, str) and pmcid.strip():
            return ('Open Access via PMCID', True)
        return ('Paywall', False)
    elif origin == 'Scopus':
        oa = str(entry.get('Open Access', '')).lower()
        if 'open' in oa:
            return (entry.get('Open Access', ''), True)
        return ('Paywall', False)
    elif origin == 'WOS':
        # Si el nombre del archivo contiene 'open', marcamos todo como OA
        if 'open' in filename.lower():
            return ('Open Access (filename tag)', True)
    
        moa = str(entry.get('MOA', '')).lower()
        if 'yes' in moa:
            return ('Manual Open Access', True)
        return ('Paywall', False)

    return ('Unknown', False)

def read_and_normalize_files(filepaths):
    all_entries = []

    for path in filepaths:
        try:
            origin, records, filename = detect_origin(path)

            for record in records:
                norm_entry = normalize_entry(record, origin, filename)
                all_entries.append(norm_entry)

        except Exception as e:
            print(localization['file_read_error'].format(file=os.path.basename(path), error=e))
            continue  # Skip this file and continue with others

    return all_entries

style.py
    #### STYLES ####

    # Funciones reutilizables para logs
def i_success(msg):
    return f"{icon_success} {msg}"

def i_warning(msg):
    return f"{icon_warning} {msg}"

def i_error(msg):
    return f"{icon_error} {msg}"

def i_info(msg):
    return f"{icon_info} {msg}"

def i_prompt(msg):
    return f"{icon_prompt} {msg}"

def i_title(msg):
    return f"{title}{msg}{reset}"

def i_subtitle(msg):
    return f"{subtitle}{msg}{reset}"

processor.py
# ----------- ENRICHMENT -----------
OPENALEX_BASE = "https://api.openalex.org/works/https://doi.org/"
MAILTO = "your_email@example.com"  # editable por el usuario

async def fetch_openalex(client, doi):
    url = f"{OPENALEX_BASE}{doi}?mailto={MAILTO}"
    try:
        r = await client.get(url, timeout=10)
        r.raise_for_status()
        return doi, r.json()
    except Exception:
        return doi, None

async def enrich_with_openalex(entries):
    enriched_entries = []
    async with httpx.AsyncClient() as client:
        tasks = [fetch_openalex(client, e['DOI'].replace("https://doi.org/", "")) for e in entries if e.get('DOI')]
        responses = await asyncio.gather(*tasks)

        response_map = {doi: data for doi, data in responses if data}

        for entry in entries:
            doi = entry.get('DOI', '').replace("https://doi.org/", "")
            data = response_map.get(doi)
            if data:
                entry['is_oa'] = str(data.get('open_access', {}).get('is_oa', False)).lower()
                entry['Open Access'] = data.get('open_access', {}).get('oa_status', 'Unknown').capitalize()
                entry['Cited By'] = data.get('cited_by_count', entry.get('Cited By', ''))
                entry['Base_Origin'] = data.get('host_venue', {}).get('source', {}).get('display_name', entry.get('Base_Origin', ''))
            else:
                entry['Open Access'] = 'Unknown'
                entry['is_oa'] = entry.get('is_oa', 'false')
            entry['OpenAlex API'] = f"https://api.openalex.org/works/https://doi.org/{doi}"
            enriched_entries.append(entry)

    return enriched_entries
#####################################################




